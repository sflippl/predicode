{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Artificial Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Most often, we would like data where the variance decays for the components. For now, we consider an exponential decay with $\\alpha\\geq 0$ (in the special case $\\alpha=0$, the variance does not decay). The highest variance is thus set at $1$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "k0 = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "alpha = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "n = 10000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "pc_variance = np.exp(-alpha*np.array(range(k0)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.00000000e+00, 3.67879441e-01, 1.35335283e-01, 4.97870684e-02,\n",
       "       1.83156389e-02, 6.73794700e-03, 2.47875218e-03, 9.11881966e-04,\n",
       "       3.35462628e-04, 1.23409804e-04])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pc_variance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy.stats as stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_ortho = stats.ortho_group.rvs(k0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.03113753, -0.10756708,  0.3829638 , -0.29449399,  0.38944405,\n",
       "        -0.3968229 ,  0.04771298,  0.07001126, -0.11376546,  0.65177913],\n",
       "       [-0.11525023, -0.02037656,  0.08927556, -0.08101602,  0.40664692,\n",
       "         0.36917823, -0.46045378, -0.31050022,  0.59774144,  0.06626683],\n",
       "       [ 0.14127141,  0.11664488, -0.63247937, -0.47459633,  0.01061824,\n",
       "         0.19992794, -0.2108889 ,  0.44073605, -0.03033881,  0.24786642],\n",
       "       [-0.16510134, -0.90756312, -0.05278363, -0.05206021, -0.23688768,\n",
       "         0.07820758,  0.10236342,  0.15746166,  0.20424004,  0.06599796],\n",
       "       [-0.43007134, -0.15025137, -0.07656355,  0.16677394,  0.32812153,\n",
       "         0.41681248, -0.10812714, -0.08925167, -0.67251008,  0.07391964],\n",
       "       [ 0.18364891,  0.05924229, -0.1539361 ,  0.01046509,  0.22094375,\n",
       "         0.39632736,  0.79616699, -0.18713127,  0.1611838 ,  0.19541204],\n",
       "       [ 0.19301993, -0.12784881, -0.27740139,  0.61053827,  0.52103364,\n",
       "        -0.25648143, -0.03607002,  0.36786525,  0.13235167, -0.07271751],\n",
       "       [-0.41549721,  0.3038901 ,  0.21114583,  0.35780542, -0.29210159,\n",
       "         0.22023249,  0.04128058,  0.45626473,  0.23381477,  0.4050049 ],\n",
       "       [ 0.06702058, -0.02264551, -0.41722645,  0.33655711, -0.30129921,\n",
       "        -0.19248595, -0.16784746, -0.53081342, -0.01864632,  0.51916416],\n",
       "       [ 0.71095507, -0.12427722,  0.34261061,  0.19178711, -0.15060747,\n",
       "         0.42190933, -0.23238361,  0.10675389, -0.19064138,  0.15000321]])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rand_ortho"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_normal = np.random.normal(scale = pc_variance, size = (n,k0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "rand_input = np.matmul(rand_normal, rand_ortho)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sklearn.decomposition as decomp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "pca = decomp.PCA()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "pca_input = pca.fit(rand_input)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.00577096e+00, 1.33666767e-01, 1.89121831e-02, 2.50179747e-03,\n",
       "       3.37748930e-04, 4.50521934e-05, 6.13145041e-06, 8.59585235e-07,\n",
       "       1.11560676e-07, 1.49624884e-08])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_input.explained_variance_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<ggplot: (-9223363263101735129)>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import lazytools\n",
    "lazytools.matrix_heatmap(np.matmul(pca_input.components_, rand_ortho.T), pole = 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is a simple way to create inherently high-dimensional data, where the different dimensions carry less and less weight -- providing a perfect way to study linear predictive coding."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Abstraction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import predicode as pc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "art_data = pc.DecayingMultiNormal(dimensions = 10, samples = 10000, alpha = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 10)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "art_data.data.shape"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
